---
- name: Check the attribute database is supported
  fail: msg="{{ idp_attribute_database }} backend not supported at the moment"
  when: idp_attribute_database != "ldap"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure

- include: ldap-backend.yml
  when: idp_attribute_database == "ldap"

- name: Configure the attributes filter
  copy:
    src: "{{ idp_attribute_filter }}"
    dest: "{{ idp_home }}/conf/attribute-filter.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0600
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure

- name: Persistent identifier enabled
  lineinfile:
    dest: "{{ idp_home }}/conf/saml-nameid.properties"
    line: "idp.persistentId.generator = shibboleth.ComputedPersistentIdGenerator"
    regexp: "idp.persistentId.generator"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  when: idp_attribute_persistent_id
  tags:
    - shibboleth
    - idp_configure

- name: Persistent identifier source attribute
  lineinfile:
    dest: "{{ idp_home }}/conf/saml-nameid.properties"
    line: "idp.persistentId.sourceAttribute = {{ idp_persistentId_sourceAttribute }}"
    regexp: "idp.persistentId.sourceAttribute"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  when: idp_attribute_persistent_id
  tags:
    - shibboleth
    - idp_configure

- name: Persistent identifier format
  lineinfile:
    dest: "{{ idp_home }}/conf/saml-nameid.properties"
    line: "idp.nameid.saml2.default = {{ idp_nameid_format }}"
    regexp: "idp.nameid.saml2.default"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  when: idp_attribute_persistent_id
  tags:
    - shibboleth
    - idp_configure

- debug: msg="The salt has not been customised. Please change the value of 'idp_persistentId_salt' to make the persistent identifier secure"
  when: idp_persistentId_salt == "provideasecuresaltpassphraseforthepersistentid"

- name: Persistent identifier salt
  lineinfile:
    dest: "{{ idp_home }}/conf/saml-nameid.properties"
    line: "idp.persistentId.salt = {{ idp_persistentId_salt }}"
    regexp: "idp.persistentId.salt"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  when: idp_attribute_persistent_id
  tags:
    - shibboleth
    - idp_configure

- name: Persistent identifier bean
  blockinfile:
    dest: "{{ idp_home }}/conf/saml-nameid.xml"
    content: '<ref bean="shibboleth.SAML2PersistentGenerator" />'
    marker: "<!-- Managed block {mark} -->"
    insertafter: "shibboleth.SAML2TransientGenerator"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  when: idp_attribute_persistent_id
  tags:
    - shibboleth
    - idp_configure

- name: Persistent identifier subject
  blockinfile:
    dest: "{{ idp_home }}/conf/c14n/subject-c14n.xml"
    content: '<ref bean="c14n/SAML2Persistent" />'
    marker: "<!-- Managed block {mark} -->"
    insertafter: "Handle a SAML 2 persistent ID"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  when: idp_attribute_persistent_id
  tags:
    - shibboleth
    - idp_configure


- name: Configure storage subsystem
  lineinfile:
    dest: "{{ idp_home }}/conf/idp.properties"
    line: "idp.session.StorageService = {{ idp_session_storageService }}"
    regexp: "^idp.session.StorageService"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure


- name: Enable Single Logout (SLO)
  lineinfile:
    dest: "{{ idp_home }}/conf/idp.properties"
    line: "idp.session.trackSPSessions = {{ 'true' if idp_session_trackSPSessions else 'false' }}"
    regexp: "idp.session.trackSPSessions"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure

- name: Enable Secondary Index
  lineinfile:
    dest: "{{ idp_home }}/conf/idp.properties"
    line: "idp.session.secondaryServiceIndex = {{ 'true' if idp_session_secondaryIndex else 'false' }}"
    regexp: "idp.session.secondaryServiceIndex"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure

- name: Configure HTML Local Storage
  lineinfile:
    dest: "{{ idp_home }}/conf/idp.properties"
    line: "idp.storage.htmlLocalStorage = {{ 'true' if idp_storage_html_local else 'false' }}"
    regexp: "idp.storage.htmlLocalStorage"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure

- name: Add logout elaboration
  lineinfile:
    dest: "{{ idp_home }}/conf/idp.properties"
    line: "idp.logout.elaboration = {{ 'true' if idp_logout_elaboration else 'false' }}"
    regexp: "idp.logout.elaboration"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure

- name: Add metadata providers by url
  template:
    src: shibboleth-idp/conf/metadata-providers.xml.j2
    dest: "{{ idp_home }}/conf/metadata-providers.xml"
    mode: 0600
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - metadata_providers

- name: Retrieve certificate for metadata providers
  get_url:
    url: "{{ item.certificate.url }}"
    dest: "{{ idp_home }}/metadata/{{ item.name }}.pem"
    mode: 0600
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
  when: item.certificate is defined and  item.certificate.url is defined
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  with_items:
    - "{{ metadataproviders }}"
  tags:
    - shibboleth
    - idp_configure
    - metadata_providers

- name: Copy certificate for metadata providers
  copy:
    src: "{{ item.certificate.path }}"
    dest: "{{ idp_home }}/metadata/{{ item.name }}.pem"
    mode: 0600
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
  when: item.certificate is defined and  item.certificate.path is defined
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  with_items:
    - "{{ metadataproviders }}"
  tags:
    - shibboleth
    - idp_configure
    - metadata_providers
